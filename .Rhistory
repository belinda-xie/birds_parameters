distCond <- distConds[i]
# load in data
dataCond <- dataSheet[dataSheet$distribution == distCond & dataSheet$dependency == depCond,]
dataCond <- as.data.frame(table(factor(dataCond[,9], levels = 0:10))) # levels ensures categories without data don't disappear!
fit <- optimise(f = logFunc, interval = c(0,1), data = dataCond, distCond = distCond)            # trembling hand fn
#fit <- optimise(f = logFuncNormal, interval = c(.01, 10), data = dataCond, distCond = distCond) # gaussian noise fn
logln[2,i] <- fit$objective
minSigma[2,i] <- fit$minimum
}
logln
minSigma
?optimise
install.packages("rmarkdown")
install("shiny")
install.packages("shiny")
install.packages("shinydashboard")
install.packages("plotly")
install.packages("flexdashboard")
install.packages("xaringan")
install.packages("xaringanthemer")
rsconnect::setAccountInfo(name='belinda-xie', token='57EB1DEEEF27B4D546A91081F7F67166', secret='aom6yvHIKkQrij4axDOdfUDfsVuPGktSOMP8aAtp')
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/birds-exptfour-test.csv"
tidyfile <- "C:/Users/belin/Documents/birds-exptfour-test.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
tidyfile <- "C:/Users/belin/Documents/birds-exptfour-test_tidied.csv"
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/birds-exptfour-test_raw.csv"
tidyfile <- "C:/Users/belin/Documents/birds-exptfour-test_tidied.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/birds-exptfour_raw.csv"
tidyfile <- "C:/Users/belin/Documents/birds-exptfour_tidied.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
makenice <- TRUE
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/urns_exp5_test.csv"
tidyfile <- "C:/Users/belin/Documents/urns_exp5_test-tidied.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/urns_exp5_test.csv"
tidyfile <- "C:/Users/belin/Documents/urns_exp5_test-tidied.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/urns_exp5_test.csv"
tidyfile <- "C:/Users/belin/Documents/urns_exp5_test-tidied.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/urns_exp5_test.csv"
tidyfile <- "C:/Users/belin/Documents/urns_exp5_test-tidied.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/urns_exp6.csv"
tidyfile <- "C:/Users/belin/Documents/urns_exp6-tidied.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/urns_exp5.csv"
tidyfile <- "C:/Users/belin/Documents/urns_exp5-tidied.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
rstudioapi::terminalCreate()
# -- user should edit --
rawfile <-  "C:/Users/belin/Documents/urns_exp6_top-up.csv"
tidyfile <- "C:/Users/belin/Documents/urns_exp6_top-up-tidied.csv"
# -- parse the raw data into something nicer --
makenice <- TRUE
if(makenice) {
# raw data
raw <- read.csv(file=rawfile, header=TRUE, stringsAsFactors=FALSE)
# create tidy from 1st subject
nsubj <- dim(raw)[1]
tidy <- read.csv(text=raw[1,1])
tidy$subj_id <- 1
tidy$timestamp <- raw[1,2]
if(is.null(tidy$gender)) tidy$gender <- NA
# if there are multiple subjects, iterate
if(nsubj>1) {
for( i in 2:nsubj) {
tmp <- read.csv(text=raw[i,1])
tmp$subj_id <- i
tmp$timestamp <- raw[i,2]
if(is.null(tmp$gender)) tmp$gender <- NA
tidy <- rbind(tidy, tmp)
}
}
# reorder columns because I'm like that
leftvars <- c("subj_id", "timestamp", "gender",
"age", "language", "country", "turkcode")
rightvars <- setdiff(names(tidy), leftvars)
tidy <- tidy[, c(leftvars, rightvars)]
# save
write.csv(tidy, file=tidyfile, row.names = FALSE)
}
devtools::install_github('yihui/tinytex')
install.packages('tinytex')
tinytex::install_tinytex()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()  # update LaTeX packages
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("rmarkdwon")
install.packages("rmarkdown")
install.packages('knitr')
install.packages("stringi")
install.packages("stringi", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("stringr", dependencies=TRUE, INSTALL_opts = c('--no-lock'))
install.packages("tidyr")
install.packages("tidyr")
install.packages("installr")
typesMed3 <- read.csv("./typesMed3.csv")
typesMed3 <- as.data.frame(typesMed3)
typesMed3 <- pivot_longer(typesMed3, thetaType:tokensd, names_to = "parameter", values_to = "value")
typesMed3$decreased <- as.character(as.numeric(typesMed3$decreased))
typesMed3$decreased <- gsub("0", "Did not reproduce", typesMed3$decreased)
typesMed3$decreased <- gsub("1", "Reproduced", typesMed3$decreased)
mu <- ddply(typesMed3, c("decreased", "parameter"), summarise, grp.mean=mean(value))
require(cowplot)
require(tidyverse)
require(ggpubr)
require(BayesFactor)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./BayesGen-BX.R")
set.seed(1)
typesMed3 <- read.csv("./typesMed3.csv")
typesMed3 <- as.data.frame(typesMed3)
typesMed3 <- pivot_longer(typesMed3, thetaType:tokensd, names_to = "parameter", values_to = "value")
typesMed3$decreased <- as.character(as.numeric(typesMed3$decreased))
typesMed3$decreased <- gsub("0", "Did not reproduce", typesMed3$decreased)
typesMed3$decreased <- gsub("1", "Reproduced", typesMed3$decreased)
mu <- ddply(typesMed3, c("decreased", "parameter"), summarise, grp.mean=mean(value))
library(dplyr)
typesMed3 <- read.csv("./typesMed3.csv")
typesMed3 <- as.data.frame(typesMed3)
typesMed3 <- pivot_longer(typesMed3, thetaType:tokensd, names_to = "parameter", values_to = "value")
typesMed3$decreased <- as.character(as.numeric(typesMed3$decreased))
typesMed3$decreased <- gsub("0", "Did not reproduce", typesMed3$decreased)
typesMed3$decreased <- gsub("1", "Reproduced", typesMed3$decreased)
mu <- ddply(typesMed3, c("decreased", "parameter"), summarise, grp.mean=mean(value))
library(plyr)
library(plyr)
mu <- ddply(typesMed3, c("decreased", "parameter"), summarise, grp.mean=mean(value))
mu
summ <- typesMed3 %>%
group_by(decreased, parameter) %>%
summarise(meanVal = mean(value), sd = sd(value), medVal = median(value), skew = skewness(value))
summ <- typesMed3 %>%
group_by(decreased, parameter) %>%
summarise(meanVal = mean(value), sd = sd(value), medVal = median(value))
summ
typesMed3
typesMed3$decreased <- as.factor(as.character(typesMed3$decreased))
typesMed3$parameter <- as.factor(as.character(typesMed3$parameter))
summ <- typesMed3 %>%
group_by(decreased, parameter) %>%
summarise(meanVal = mean(value), sd = sd(value), medVal = median(value))
summ
typesMed3
summ <- typesMed3 %>%
group_by(decreased, parameter)
summ
typesMed3 <- read.csv("./typesMed3.csv")
typesMed3 <- as.data.frame(typesMed3)
typesMed3 <- pivot_longer(typesMed3, thetaType:tokensd, names_to = "parameter", values_to = "value")
typesMed3$decreased <- as.character(as.numeric(typesMed3$decreased))
typesMed3$decreased <- gsub("0", "Did not reproduce", typesMed3$decreased)
typesMed3$decreased <- gsub("1", "Reproduced", typesMed3$decreased)
typesMed3
typesMed3 <- typesMed3[,-1]
typesMed3
typesMed3$decreased <- as.factor(as.character(typesMed3$decreased))
typesMed3$parameter <- as.factor(as.character(typesMed3$parameter))
typesMed3
summ <- typesMed3 %>%
group_by(decreased, parameter) %>%
summarise(meanVal = mean(value), sd = sd(value), medVal = median(value))
summ
summ <- typesMed3 %>%
group_by(decreased, parameter)
typesMed3 <- as.data.frame(typesMed3)
summ <- typesMed3 %>%
group_by(decreased, parameter)
summ
summ <- typesMed3 %>%
group_by(decreased, parameter) %>%
summarise(meanVal = mean(value), sd = sd(value), medVal = median(value))
summ
summ <- typesMed3 %>%
group_by(decreased, parameter) %>%
summarise(meanVal = mean(value))#, sd = sd(value), medVal = median(value))
summ
summ <- typesMed3 %>%
group_by(decreased)%>%
summarise(meanVal = mean(value))#, sd = sd(value), medVal = median(value))
summ
typesMed3 <- read.csv("./typesMed3.csv")
typesMed3 <- as.data.frame(typesMed3)
typesMed3 <- pivot_longer(typesMed3, thetaType:tokensd, names_to = "parameter", values_to = "value")
typesMed3$decreased <- as.character(as.numeric(typesMed3$decreased))
typesMed3$decreased <- gsub("0", "Did not reproduce", typesMed3$decreased)
typesMed3$decreased <- gsub("1", "Reproduced", typesMed3$decreased)
head(typesMed3)
typesMed3 <- pivot_wider(typesMed3, names_from = parameter, values_from = value)
typesMed3
summ <- typesMed3 %>%
group_by(decreased, thetaType, thetaToken, target1, target2, target3, target4, typesd, tokensd)%>%
summarise(meanVal = mean(value))#, sd = sd(value), medVal = median(value))
typesMed3 <- read.csv("./typesMed3.csv")
typesMed3 <- as.data.frame(typesMed3)
typesMed3 <- pivot_longer(typesMed3, thetaType:tokensd, names_to = "parameter", values_to = "value")
typesMed3$decreased <- as.character(as.numeric(typesMed3$decreased))
typesMed3$decreased <- gsub("0", "Did not reproduce", typesMed3$decreased)
typesMed3$decreased <- gsub("1", "Reproduced", typesMed3$decreased)
ddply(typesMed3, c("decreased", "parameter"), summarise,
mean = mean(value), sd = sd(value), median = median(value))
library(e1071)
install.packages("e1071")
library(e1071)
ddply
?ddply
ddply(typesMed3, c("decreased", "parameter"), skew = skewness(value))
ddply(typesMed3, c("decreased", "parameter"), summarise, skew = skewness(value))
ddply(typesMed3, c("decreased", "parameter"), summarise,
mean = mean(value), sd = sd(value), median = median(value), skew = skewness(value))
summ <- ddply(typesMed3, c("decreased", "parameter"), summarise,
mean = mean(value), sd = sd(value), median = median(value), skew = skewness(value))
write.csv(summ, "./typesMed3_parameters.csv")
require(cowplot)
require(tidyverse)
require(BayesFactor)
require(ggpubr)
rm(list = ls())
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
source("./BayesGen-BX.R")
set.seed(1)
decreaseHigh1 <- read.csv("./decreaseHigh1.csv")
decreaseHigh1 <- as.data.frame(decreaseHigh1)
decreaseHigh1 <- pivot_longer(decreaseHigh1, thetaType:tokensd, names_to = "parameter", values_to = "value")
decreaseHigh1$decreased <- as.character(as.numeric(decreaseHigh1$decreased))
decreaseHigh1$decreased <- gsub("0", "Did not reproduce", decreaseHigh1$decreased)
decreaseHigh1$decreased <- gsub("1", "Reproduced", decreaseHigh1$decreased)
library(plyr)
mu <- ddply(decreaseHigh1, c("decreased", "parameter"), summarise, grp.mean=mean(value), grp.mode=Mode(value))
mu <- ddply(decreaseHigh1, c("decreased", "parameter"), summarise, grp.mean=mean(value))
ggplot(decreaseHigh1, aes(x=value)) +
geom_histogram(bins = 20) +
geom_vline(data=mu, aes(xintercept=grp.mean, color="red"), linetype="dashed") +
labs(
# title = "Experiment 3: Adding type-label instances decreases gen for high-similarity items",
x = "Parameter value", y = "Count") +
# geom_vline(data=mu, aes(xintercept=grp.mode, color="blue"), linetype="dotted") +
facet_wrap(~ decreased + parameter, scales = "free") +
theme_bw() +
theme(legend.position = "none")
library(e1071)
summ <- ddply(typesMed3, c("decreased", "parameter"), summarise,
mean = mean(value), sd = sd(value), median = median(value), skew = skewness(value))
summ <- ddply(decreaseHigh1, c("decreased", "parameter"), summarise,
mean = mean(value), sd = sd(value), median = median(value), skew = skewness(value))
summ
write.csv(summ, "./decreaseHigh1_parameters.csv")
